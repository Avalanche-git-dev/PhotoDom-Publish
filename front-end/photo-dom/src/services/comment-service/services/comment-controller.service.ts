/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addComment } from '../fn/comment-controller/add-comment';
import { AddComment$Params } from '../fn/comment-controller/add-comment';
import { CommentDto } from '../models/comment-dto';
import { CommentResponseLong } from '../models/comment-response-long';
import { CommentResponseString } from '../models/comment-response-string';
import { CommentResponseVoid } from '../models/comment-response-void';
import { countMainComments } from '../fn/comment-controller/count-main-comments';
import { CountMainComments$Params } from '../fn/comment-controller/count-main-comments';
import { countReplies } from '../fn/comment-controller/count-replies';
import { CountReplies$Params } from '../fn/comment-controller/count-replies';
import { deleteComment } from '../fn/comment-controller/delete-comment';
import { DeleteComment$Params } from '../fn/comment-controller/delete-comment';
import { getCommentById } from '../fn/comment-controller/get-comment-by-id';
import { GetCommentById$Params } from '../fn/comment-controller/get-comment-by-id';
import { getCommentsByPhoto } from '../fn/comment-controller/get-comments-by-photo';
import { GetCommentsByPhoto$Params } from '../fn/comment-controller/get-comments-by-photo';
import { getCommentsByUser } from '../fn/comment-controller/get-comments-by-user';
import { GetCommentsByUser$Params } from '../fn/comment-controller/get-comments-by-user';
import { getReplies } from '../fn/comment-controller/get-replies';
import { GetReplies$Params } from '../fn/comment-controller/get-replies';

@Injectable({ providedIn: 'root' })
export class CommentControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addComment()` */
  static readonly AddCommentPath = '/api/comments/comment/add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addComment()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addComment$Response(params: AddComment$Params, context?: HttpContext): Observable<StrictHttpResponse<CommentResponseString>> {
    return addComment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addComment$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  addComment(params: AddComment$Params, context?: HttpContext): Observable<CommentResponseString> {
    return this.addComment$Response(params, context).pipe(
      map((r: StrictHttpResponse<CommentResponseString>): CommentResponseString => r.body)
    );
  }

  /** Path part for operation `countReplies()` */
  static readonly CountRepliesPath = '/api/comments/count/replies';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countReplies()` instead.
   *
   * This method doesn't expect any request body.
   */
  countReplies$Response(params: CountReplies$Params, context?: HttpContext): Observable<StrictHttpResponse<CommentResponseLong>> {
    return countReplies(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countReplies$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  countReplies(params: CountReplies$Params, context?: HttpContext): Observable<CommentResponseLong> {
    return this.countReplies$Response(params, context).pipe(
      map((r: StrictHttpResponse<CommentResponseLong>): CommentResponseLong => r.body)
    );
  }

  /** Path part for operation `countMainComments()` */
  static readonly CountMainCommentsPath = '/api/comments/count/comments';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countMainComments()` instead.
   *
   * This method doesn't expect any request body.
   */
  countMainComments$Response(params: CountMainComments$Params, context?: HttpContext): Observable<StrictHttpResponse<CommentResponseLong>> {
    return countMainComments(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countMainComments$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  countMainComments(params: CountMainComments$Params, context?: HttpContext): Observable<CommentResponseLong> {
    return this.countMainComments$Response(params, context).pipe(
      map((r: StrictHttpResponse<CommentResponseLong>): CommentResponseLong => r.body)
    );
  }

  /** Path part for operation `getCommentById()` */
  static readonly GetCommentByIdPath = '/api/comments/comment';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCommentById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCommentById$Response(params: GetCommentById$Params, context?: HttpContext): Observable<StrictHttpResponse<CommentDto>> {
    return getCommentById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCommentById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCommentById(params: GetCommentById$Params, context?: HttpContext): Observable<CommentDto> {
    return this.getCommentById$Response(params, context).pipe(
      map((r: StrictHttpResponse<CommentDto>): CommentDto => r.body)
    );
  }

  /** Path part for operation `getCommentsByUser()` */
  static readonly GetCommentsByUserPath = '/api/comments/comment/user';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCommentsByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCommentsByUser$Response(params: GetCommentsByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CommentDto>>> {
    return getCommentsByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCommentsByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCommentsByUser(params: GetCommentsByUser$Params, context?: HttpContext): Observable<Array<CommentDto>> {
    return this.getCommentsByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CommentDto>>): Array<CommentDto> => r.body)
    );
  }

  /** Path part for operation `getReplies()` */
  static readonly GetRepliesPath = '/api/comments/comment/replies';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getReplies()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReplies$Response(params: GetReplies$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CommentDto>>> {
    return getReplies(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getReplies$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getReplies(params: GetReplies$Params, context?: HttpContext): Observable<Array<CommentDto>> {
    return this.getReplies$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CommentDto>>): Array<CommentDto> => r.body)
    );
  }

  /** Path part for operation `getCommentsByPhoto()` */
  static readonly GetCommentsByPhotoPath = '/api/comments/comment/photo';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getCommentsByPhoto()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCommentsByPhoto$Response(params: GetCommentsByPhoto$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CommentDto>>> {
    return getCommentsByPhoto(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getCommentsByPhoto$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getCommentsByPhoto(params: GetCommentsByPhoto$Params, context?: HttpContext): Observable<Array<CommentDto>> {
    return this.getCommentsByPhoto$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CommentDto>>): Array<CommentDto> => r.body)
    );
  }

  /** Path part for operation `deleteComment()` */
  static readonly DeleteCommentPath = '/api/comments/comment/delete';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteComment()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteComment$Response(params: DeleteComment$Params, context?: HttpContext): Observable<StrictHttpResponse<CommentResponseVoid>> {
    return deleteComment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteComment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteComment(params: DeleteComment$Params, context?: HttpContext): Observable<CommentResponseVoid> {
    return this.deleteComment$Response(params, context).pipe(
      map((r: StrictHttpResponse<CommentResponseVoid>): CommentResponseVoid => r.body)
    );
  }

}

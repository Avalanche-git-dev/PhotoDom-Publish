/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addLike } from '../fn/photo-controller/add-like';
import { AddLike$Params } from '../fn/photo-controller/add-like';
import { deletePhoto } from '../fn/photo-controller/delete-photo';
import { DeletePhoto$Params } from '../fn/photo-controller/delete-photo';
import { getLikeStatus } from '../fn/photo-controller/get-like-status';
import { GetLikeStatus$Params } from '../fn/photo-controller/get-like-status';
import { getPhotoById } from '../fn/photo-controller/get-photo-by-id';
import { GetPhotoById$Params } from '../fn/photo-controller/get-photo-by-id';
import { getPhotoMetadata } from '../fn/photo-controller/get-photo-metadata';
import { GetPhotoMetadata$Params } from '../fn/photo-controller/get-photo-metadata';
import { getPhotoMetadataBatch } from '../fn/photo-controller/get-photo-metadata-batch';
import { GetPhotoMetadataBatch$Params } from '../fn/photo-controller/get-photo-metadata-batch';
import { getPhotoMetadataBatchByUser } from '../fn/photo-controller/get-photo-metadata-batch-by-user';
import { GetPhotoMetadataBatchByUser$Params } from '../fn/photo-controller/get-photo-metadata-batch-by-user';
import { getPhotosBatch } from '../fn/photo-controller/get-photos-batch';
import { GetPhotosBatch$Params } from '../fn/photo-controller/get-photos-batch';
import { getPhotosBatchByUser } from '../fn/photo-controller/get-photos-batch-by-user';
import { GetPhotosBatchByUser$Params } from '../fn/photo-controller/get-photos-batch-by-user';
import { getPhotosByUser } from '../fn/photo-controller/get-photos-by-user';
import { GetPhotosByUser$Params } from '../fn/photo-controller/get-photos-by-user';
import { PhotoDto } from '../models/photo-dto';
import { PhotoResponsePhotoDto } from '../models/photo-response-photo-dto';
import { PhotoResponseString } from '../models/photo-response-string';
import { PhotoResponseVoid } from '../models/photo-response-void';
import { removeLike } from '../fn/photo-controller/remove-like';
import { RemoveLike$Params } from '../fn/photo-controller/remove-like';
import { uploadPhoto } from '../fn/photo-controller/upload-photo';
import { UploadPhoto$Params } from '../fn/photo-controller/upload-photo';

@Injectable({ providedIn: 'root' })
export class PhotoControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `uploadPhoto()` */
  static readonly UploadPhotoPath = '/api/photos/upload';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadPhoto()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPhoto$Response(params?: UploadPhoto$Params, context?: HttpContext): Observable<StrictHttpResponse<PhotoResponseString>> {
    return uploadPhoto(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadPhoto$Response()` instead.
   *
   * This method sends `multipart/form-data` and handles request body of type `multipart/form-data`.
   */
  uploadPhoto(params?: UploadPhoto$Params, context?: HttpContext): Observable<PhotoResponseString> {
    return this.uploadPhoto$Response(params, context).pipe(
      map((r: StrictHttpResponse<PhotoResponseString>): PhotoResponseString => r.body)
    );
  }

  /** Path part for operation `addLike()` */
  static readonly AddLikePath = '/api/photos/like/add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addLike()` instead.
   *
   * This method doesn't expect any request body.
   */
  addLike$Response(params: AddLike$Params, context?: HttpContext): Observable<StrictHttpResponse<PhotoResponseVoid>> {
    return addLike(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addLike$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addLike(params: AddLike$Params, context?: HttpContext): Observable<PhotoResponseVoid> {
    return this.addLike$Response(params, context).pipe(
      map((r: StrictHttpResponse<PhotoResponseVoid>): PhotoResponseVoid => r.body)
    );
  }

  /** Path part for operation `getPhotoById()` */
  static readonly GetPhotoByIdPath = '/api/photos/photo';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPhotoById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhotoById$Response(params: GetPhotoById$Params, context?: HttpContext): Observable<StrictHttpResponse<PhotoResponsePhotoDto>> {
    return getPhotoById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPhotoById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhotoById(params: GetPhotoById$Params, context?: HttpContext): Observable<PhotoResponsePhotoDto> {
    return this.getPhotoById$Response(params, context).pipe(
      map((r: StrictHttpResponse<PhotoResponsePhotoDto>): PhotoResponsePhotoDto => r.body)
    );
  }

  /** Path part for operation `getPhotoMetadataBatchByUser()` */
  static readonly GetPhotoMetadataBatchByUserPath = '/api/photos/metadata/user/batch';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPhotoMetadataBatchByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhotoMetadataBatchByUser$Response(params?: GetPhotoMetadataBatchByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PhotoDto>>> {
    return getPhotoMetadataBatchByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPhotoMetadataBatchByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhotoMetadataBatchByUser(params?: GetPhotoMetadataBatchByUser$Params, context?: HttpContext): Observable<Array<PhotoDto>> {
    return this.getPhotoMetadataBatchByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PhotoDto>>): Array<PhotoDto> => r.body)
    );
  }

  /** Path part for operation `getPhotoMetadataBatch()` */
  static readonly GetPhotoMetadataBatchPath = '/api/photos/metadata/batch';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPhotoMetadataBatch()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhotoMetadataBatch$Response(params?: GetPhotoMetadataBatch$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PhotoDto>>> {
    return getPhotoMetadataBatch(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPhotoMetadataBatch$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhotoMetadataBatch(params?: GetPhotoMetadataBatch$Params, context?: HttpContext): Observable<Array<PhotoDto>> {
    return this.getPhotoMetadataBatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PhotoDto>>): Array<PhotoDto> => r.body)
    );
  }

  /** Path part for operation `getLikeStatus()` */
  static readonly GetLikeStatusPath = '/api/photos/like/status';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getLikeStatus()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLikeStatus$Response(params: GetLikeStatus$Params, context?: HttpContext): Observable<StrictHttpResponse<PhotoResponseVoid>> {
    return getLikeStatus(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getLikeStatus$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getLikeStatus(params: GetLikeStatus$Params, context?: HttpContext): Observable<PhotoResponseVoid> {
    return this.getLikeStatus$Response(params, context).pipe(
      map((r: StrictHttpResponse<PhotoResponseVoid>): PhotoResponseVoid => r.body)
    );
  }

  /** Path part for operation `getPhotosByUser()` */
  static readonly GetPhotosByUserPath = '/api/photos/full/user/photos';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPhotosByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhotosByUser$Response(params: GetPhotosByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PhotoDto>>> {
    return getPhotosByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPhotosByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhotosByUser(params: GetPhotosByUser$Params, context?: HttpContext): Observable<Array<PhotoDto>> {
    return this.getPhotosByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PhotoDto>>): Array<PhotoDto> => r.body)
    );
  }

  /** Path part for operation `getPhotosBatchByUser()` */
  static readonly GetPhotosBatchByUserPath = '/api/photos/full/user/batch';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPhotosBatchByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhotosBatchByUser$Response(params?: GetPhotosBatchByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PhotoDto>>> {
    return getPhotosBatchByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPhotosBatchByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhotosBatchByUser(params?: GetPhotosBatchByUser$Params, context?: HttpContext): Observable<Array<PhotoDto>> {
    return this.getPhotosBatchByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PhotoDto>>): Array<PhotoDto> => r.body)
    );
  }

  /** Path part for operation `getPhotosBatch()` */
  static readonly GetPhotosBatchPath = '/api/photos/full/batch';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPhotosBatch()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhotosBatch$Response(params?: GetPhotosBatch$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PhotoDto>>> {
    return getPhotosBatch(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPhotosBatch$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhotosBatch(params?: GetPhotosBatch$Params, context?: HttpContext): Observable<Array<PhotoDto>> {
    return this.getPhotosBatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PhotoDto>>): Array<PhotoDto> => r.body)
    );
  }

  /** Path part for operation `getPhotoMetadata()` */
  static readonly GetPhotoMetadataPath = '/api/photos/data/photo';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getPhotoMetadata()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhotoMetadata$Response(params: GetPhotoMetadata$Params, context?: HttpContext): Observable<StrictHttpResponse<PhotoResponsePhotoDto>> {
    return getPhotoMetadata(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getPhotoMetadata$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getPhotoMetadata(params: GetPhotoMetadata$Params, context?: HttpContext): Observable<PhotoResponsePhotoDto> {
    return this.getPhotoMetadata$Response(params, context).pipe(
      map((r: StrictHttpResponse<PhotoResponsePhotoDto>): PhotoResponsePhotoDto => r.body)
    );
  }

  /** Path part for operation `removeLike()` */
  static readonly RemoveLikePath = '/api/photos/like/remove';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeLike()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeLike$Response(params: RemoveLike$Params, context?: HttpContext): Observable<StrictHttpResponse<PhotoResponseVoid>> {
    return removeLike(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeLike$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeLike(params: RemoveLike$Params, context?: HttpContext): Observable<PhotoResponseVoid> {
    return this.removeLike$Response(params, context).pipe(
      map((r: StrictHttpResponse<PhotoResponseVoid>): PhotoResponseVoid => r.body)
    );
  }

  /** Path part for operation `deletePhoto()` */
  static readonly DeletePhotoPath = '/api/photos/delete';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deletePhoto()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePhoto$Response(params: DeletePhoto$Params, context?: HttpContext): Observable<StrictHttpResponse<PhotoResponseVoid>> {
    return deletePhoto(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deletePhoto$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePhoto(params: DeletePhoto$Params, context?: HttpContext): Observable<PhotoResponseVoid> {
    return this.deletePhoto$Response(params, context).pipe(
      map((r: StrictHttpResponse<PhotoResponseVoid>): PhotoResponseVoid => r.body)
    );
  }

}

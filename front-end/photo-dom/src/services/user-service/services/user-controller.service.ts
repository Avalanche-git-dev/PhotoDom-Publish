/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { changePassword } from '../fn/user-controller/change-password';
import { ChangePassword$Params } from '../fn/user-controller/change-password';
import { createUser } from '../fn/user-controller/create-user';
import { CreateUser$Params } from '../fn/user-controller/create-user';
import { deleteUser } from '../fn/user-controller/delete-user';
import { DeleteUser$Params } from '../fn/user-controller/delete-user';
import { getAllUsers } from '../fn/user-controller/get-all-users';
import { GetAllUsers$Params } from '../fn/user-controller/get-all-users';
import { getNickname } from '../fn/user-controller/get-nickname';
import { GetNickname$Params } from '../fn/user-controller/get-nickname';
import { getNicknamesBatch } from '../fn/user-controller/get-nicknames-batch';
import { GetNicknamesBatch$Params } from '../fn/user-controller/get-nicknames-batch';
import { getProfileView } from '../fn/user-controller/get-profile-view';
import { GetProfileView$Params } from '../fn/user-controller/get-profile-view';
import { getUserById } from '../fn/user-controller/get-user-by-id';
import { GetUserById$Params } from '../fn/user-controller/get-user-by-id';
import { searchUsers } from '../fn/user-controller/search-users';
import { SearchUsers$Params } from '../fn/user-controller/search-users';
import { updateUser } from '../fn/user-controller/update-user';
import { UpdateUser$Params } from '../fn/user-controller/update-user';
import { UserResponseListProfileView } from '../models/user-response-list-profile-view';
import { UserResponseListString } from '../models/user-response-list-string';
import { UserResponseListUserDto } from '../models/user-response-list-user-dto';
import { UserResponseLong } from '../models/user-response-long';
import { UserResponseProfileView } from '../models/user-response-profile-view';
import { UserResponseString } from '../models/user-response-string';
import { UserResponseUserDto } from '../models/user-response-user-dto';
import { UserResponseVoid } from '../models/user-response-void';

@Injectable({ providedIn: 'root' })
export class UserControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateUser()` */
  static readonly UpdateUserPath = '/api/users/profile/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUser$Response(params: UpdateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseLong>> {
    return updateUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  updateUser(params: UpdateUser$Params, context?: HttpContext): Observable<UserResponseLong> {
    return this.updateUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseLong>): UserResponseLong => r.body)
    );
  }

  /** Path part for operation `changePassword()` */
  static readonly ChangePasswordPath = '/api/users/credentials/update';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `changePassword()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changePassword$Response(params: ChangePassword$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseVoid>> {
    return changePassword(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `changePassword$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  changePassword(params: ChangePassword$Params, context?: HttpContext): Observable<UserResponseVoid> {
    return this.changePassword$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseVoid>): UserResponseVoid => r.body)
    );
  }

  /** Path part for operation `searchUsers()` */
  static readonly SearchUsersPath = '/api/users/search';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `searchUsers()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  searchUsers$Response(params: SearchUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseListProfileView>> {
    return searchUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `searchUsers$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  searchUsers(params: SearchUsers$Params, context?: HttpContext): Observable<UserResponseListProfileView> {
    return this.searchUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseListProfileView>): UserResponseListProfileView => r.body)
    );
  }

  /** Path part for operation `createUser()` */
  static readonly CreateUserPath = '/api/users/register';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createUser()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUser$Response(params: CreateUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseVoid>> {
    return createUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createUser$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createUser(params: CreateUser$Params, context?: HttpContext): Observable<UserResponseVoid> {
    return this.createUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseVoid>): UserResponseVoid => r.body)
    );
  }

  /** Path part for operation `getAllUsers()` */
  static readonly GetAllUsersPath = '/api/users';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers$Response(params?: GetAllUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseListUserDto>> {
    return getAllUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllUsers(params?: GetAllUsers$Params, context?: HttpContext): Observable<UserResponseListUserDto> {
    return this.getAllUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseListUserDto>): UserResponseListUserDto => r.body)
    );
  }

  /** Path part for operation `getUserById()` */
  static readonly GetUserByIdPath = '/api/users/profile';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getUserById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserById$Response(params: GetUserById$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseUserDto>> {
    return getUserById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getUserById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getUserById(params: GetUserById$Params, context?: HttpContext): Observable<UserResponseUserDto> {
    return this.getUserById$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseUserDto>): UserResponseUserDto => r.body)
    );
  }

  /** Path part for operation `getProfileView()` */
  static readonly GetProfileViewPath = '/api/users/profile/view';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getProfileView()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProfileView$Response(params: GetProfileView$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseProfileView>> {
    return getProfileView(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getProfileView$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getProfileView(params: GetProfileView$Params, context?: HttpContext): Observable<UserResponseProfileView> {
    return this.getProfileView$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseProfileView>): UserResponseProfileView => r.body)
    );
  }

  /** Path part for operation `getNicknamesBatch()` */
  static readonly GetNicknamesBatchPath = '/api/users/nicknames';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getNicknamesBatch()` instead.
   *
   * This method doesn't expect any request body.
   */
  getNicknamesBatch$Response(params: GetNicknamesBatch$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseListString>> {
    return getNicknamesBatch(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getNicknamesBatch$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getNicknamesBatch(params: GetNicknamesBatch$Params, context?: HttpContext): Observable<UserResponseListString> {
    return this.getNicknamesBatch$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseListString>): UserResponseListString => r.body)
    );
  }

  /** Path part for operation `getNickname()` */
  static readonly GetNicknamePath = '/api/users/nickname';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getNickname()` instead.
   *
   * This method doesn't expect any request body.
   */
  getNickname$Response(params: GetNickname$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseString>> {
    return getNickname(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getNickname$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getNickname(params: GetNickname$Params, context?: HttpContext): Observable<UserResponseString> {
    return this.getNickname$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseString>): UserResponseString => r.body)
    );
  }

  /** Path part for operation `deleteUser()` */
  static readonly DeleteUserPath = '/api/users/delete';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUser$Response(params: DeleteUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseVoid>> {
    return deleteUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteUser(params: DeleteUser$Params, context?: HttpContext): Observable<UserResponseVoid> {
    return this.deleteUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseVoid>): UserResponseVoid => r.body)
    );
  }

}

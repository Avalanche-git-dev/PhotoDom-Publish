/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { addAdmin } from '../fn/admin-controller/add-admin';
import { AddAdmin$Params } from '../fn/admin-controller/add-admin';
import { banUser } from '../fn/admin-controller/ban-user';
import { BanUser$Params } from '../fn/admin-controller/ban-user';
import { getBannedUsers } from '../fn/admin-controller/get-banned-users';
import { GetBannedUsers$Params } from '../fn/admin-controller/get-banned-users';
import { getInactiveUsers } from '../fn/admin-controller/get-inactive-users';
import { GetInactiveUsers$Params } from '../fn/admin-controller/get-inactive-users';
import { removeBanUser } from '../fn/admin-controller/remove-ban-user';
import { RemoveBanUser$Params } from '../fn/admin-controller/remove-ban-user';
import { UserResponseListUserDto } from '../models/user-response-list-user-dto';
import { UserResponseVoid } from '../models/user-response-void';

@Injectable({ providedIn: 'root' })
export class AdminControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `addAdmin()` */
  static readonly AddAdminPath = '/api/admins/promote/admin';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `addAdmin()` instead.
   *
   * This method doesn't expect any request body.
   */
  addAdmin$Response(params: AddAdmin$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseVoid>> {
    return addAdmin(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `addAdmin$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  addAdmin(params: AddAdmin$Params, context?: HttpContext): Observable<UserResponseVoid> {
    return this.addAdmin$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseVoid>): UserResponseVoid => r.body)
    );
  }

  /** Path part for operation `removeBanUser()` */
  static readonly RemoveBanUserPath = '/api/admins/ban/remove';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `removeBanUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeBanUser$Response(params: RemoveBanUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseVoid>> {
    return removeBanUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `removeBanUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  removeBanUser(params: RemoveBanUser$Params, context?: HttpContext): Observable<UserResponseVoid> {
    return this.removeBanUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseVoid>): UserResponseVoid => r.body)
    );
  }

  /** Path part for operation `banUser()` */
  static readonly BanUserPath = '/api/admins/ban/add';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `banUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  banUser$Response(params: BanUser$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseVoid>> {
    return banUser(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `banUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  banUser(params: BanUser$Params, context?: HttpContext): Observable<UserResponseVoid> {
    return this.banUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseVoid>): UserResponseVoid => r.body)
    );
  }

  /** Path part for operation `getInactiveUsers()` */
  static readonly GetInactiveUsersPath = '/api/admins/inactive';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getInactiveUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInactiveUsers$Response(params?: GetInactiveUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseListUserDto>> {
    return getInactiveUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getInactiveUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getInactiveUsers(params?: GetInactiveUsers$Params, context?: HttpContext): Observable<UserResponseListUserDto> {
    return this.getInactiveUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseListUserDto>): UserResponseListUserDto => r.body)
    );
  }

  /** Path part for operation `getBannedUsers()` */
  static readonly GetBannedUsersPath = '/api/admins/banned';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getBannedUsers()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBannedUsers$Response(params?: GetBannedUsers$Params, context?: HttpContext): Observable<StrictHttpResponse<UserResponseListUserDto>> {
    return getBannedUsers(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getBannedUsers$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getBannedUsers(params?: GetBannedUsers$Params, context?: HttpContext): Observable<UserResponseListUserDto> {
    return this.getBannedUsers$Response(params, context).pipe(
      map((r: StrictHttpResponse<UserResponseListUserDto>): UserResponseListUserDto => r.body)
    );
  }

}
